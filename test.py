# import re

# pattern = "(\d\d)-(\d\d\d)-(\d\d\d\d)"

# pattern2 = r"\1\2\3"

# number = input()

# number2 = re.sub(pattern, pattern2, number)

# print(number2)

# x1 = 7
# y1 = 10
# x2 = 17
# y2 = 16

# dx = abs(x1-x2)
# dy = abs(y1-y2)

# p = 2*dy - dx

# while (x1 != x2 or y1 != y2):
#     print('p =', p, ', x =', x1, ', y =', y1)
#     x1 += 1
#     if (p <= 0):
#         p += (2*dy)
#     else:
#         y1 += 1
#         p += (2*dy - 2*dx)

# print(x2, y2)    

# x0, y0 = 3, 4
# r = 10


# p = 1-r

# x = 0 
# y = r

# print ("Awal: ", x0, y0+r)
# while (y > x):
#     print("p = ", p)
#     x += 1
#     if (p < 0):
#         p = p + 2*(x+1) + 1
#     else:
#         p = p + 2*(x+1) + 1 - 2*(y-1)
#         y -= 1

#     print("x, y =", x+x0, y+y0)

# arr = [2, 7, 11, 15]
# x = 9

# arr = [5, 1, 4, 9, 7, 5, 6]
# x = 10
# def find_pair(arr, x):
#     for i in range(len(arr)): # n
#         for j in range(i+1, len(arr)): # (n(n+1) / 2) - n
#             if (arr[i] + arr[j] == x): 
#                 return ((arr[i], arr[j]))

#     return 0

# def find_pair_2(a, n, x):
     
#     rem = []
     
#     for i in range(x):
 
#         # Initializing the rem
#         # values with 0's.
#         rem.append(0)
 
#     for i in range(n):
#         if (a[i] < x):
 
#             # Perform the remainder operation
#             # only if the element is x, as
#             # numbers greater than x can't
#             # be used to get a sum x.Updating
#             # the count of remainders.
#             rem[a[i] % x] += 1
 
#     # Traversing the remainder list from
#     # start to middle to find pairs
#     for i in range(1, x // 2):
#         if (rem[i] > 0 and rem[x - i] > 0):
 
#             # The elements with remainders
#             # i and x-i will result to a
#             # sum of x. Once we get two
#             # elements which add up to x,
#             # we print x and break.
#             count += 1
 
#     # Once we reach middle of
#     # remainder array, we have to
#     # do operations based on x.
#     if (i >= x // 2):
#         if (x % 2 == 0):
#             if (rem[x // 2] > 1):
 
#                 # If x is even and we have more
#                 # than 1 elements with remainder
#                 # x/2, then we will have two
#                 # distinct elements which add up
#                 # to x. if we dont have than 1
#                 # element, print "No".
#                 count += 1
#         else:
 
#             # When x is odd we continue
#             # the same process which we
#             # did in previous loop.
#             if (rem[x // 2] > 0 and
#                 rem[x - x // 2] > 0):
#                 count += 1



# print(find_pair(arr, x))
# print(find_pair_2(arr, x))

#x = "8.919059635386898 9.127761174931308 9.336462714475719 9.54516425402013 9.75386579356454"
# x = "1197.0244969648384 1252.185467208904 1308.6049490416551 1366.2829424630927 1425.2194474732157"

x = '''
4823.013596167254 4823.013596191535 -2.4280780053231865e-08
563771.9923441897 563771.9935806975 -0.0012365077855065465
538945.5953114496 538946.3833732115 -0.7880617618793622
185.378734079457 185.3787340338703 4.558668820209277e-08
16.89375102808703 16.89375102808703 0.0
128.90875852160033 128.90868018822147 7.833337886609115e-05
34027550.81967971 33781682.33448593 245868.4851937741
20.56907801755782 20.5690780189624 -1.4045795637684932e-09
7841373140.393041 7842230799.708993 -857659.315952301
49440.38714605232 49440.387470933994 -0.000324881671986077
120881.77195233824 120881.77195226114 7.709604687988758e-08
1204567.8875494162 1204567.784249224 0.10330019216053188
276.6463092027653 276.6463092027651 1.7053025658242404e-13
950770.3432484454 3265044055264485.5 -3265044054313715.0
92.70687082586163 81.85571889630364 10.851151929557986
0.3746188225356373 0.3746188225356373 0.0
224698.83637794392 224698.83637386266 4.081259248778224e-06
14444708199.739399 14444708199.739403 -3.814697265625e-06
22952480.89641109 22952480.84356519 0.05284590274095535
1648970.6924062865 1648970.6599338953 0.03247239114716649
2.114699170365153 2.114699170365153 0.0
98208903323.24498 98210048900.01852 -1145576.7735443115
21.540832026976645 21.5408320269716 5.044853423896711e-12
883928.6028941463 883422.4016734352 506.2012207111111
989582.4680736908 989582.4680792087 -5.517969839274883e-06
129.13461133129684 129.13461133011825 1.1785914466599934e-09
3242968597.995741 3242968616.601965 -18.606224060058594
717.0734506740093 717.073441844026 8.829983357827587e-06
1077.6623369436145 1076.9416296660725 0.7207072775420329
21707078.580285434 21720278.217517707 -13199.637232273817
7.323246011231273 7.323246011231273 0.0
6125.860049369169 6125.8600493259955 4.3173713493160903e-08
4147748.1480765305 4140267.1035414278 7481.044535102788
1782.3581549645903 1782.3581549639653 6.250502337934449e-10
186453804.07380456 186454443.89306977 -639.819265216589
794414.2262681441 794414.2262670886 1.055537723004818e-06
384995.7328958809 384995.7204885391 0.012407341797370464
8055.856078985001 8055.856308972842 -0.0002299878415215062
43.65462536995942 43.65462536994353 1.588773557159584e-11
82654.08237949002 82654.08237956693 -7.690687198191881e-08
78512.43196164414 78512.43196125988 3.842578735202551e-07
26.799622944434024 26.799622944397594 3.6429526062420337e-11
95470412.96588938 95470412.96563008 0.00025929510593414307
139.1145645957235 139.11456459572338 1.1368683772161603e-13
43.75517848578147 43.75517714362423 1.3421572404581639e-06
44393991292.437004 44868223558.90602 -474232266.469017
240.88516046682452 240.87801403859785 0.007146428226661783
46.92894960160142 46.93092073571461 -0.001971134113190942
3295.608193158619 3295.608193153813 4.806224751519039e-09
1369.1419391757624 1369.1421900575474 -0.00025088178495025204
'''
final = []

x = x.split()
for d in x:
    final.append(d.replace('.', ','))
